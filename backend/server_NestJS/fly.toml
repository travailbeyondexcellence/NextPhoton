# ============================================
# Fly.io Configuration for NextPhoton Backend
# ============================================
# This file configures how Fly.io deploys and runs your NestJS backend
#
# Documentation: https://fly.io/docs/reference/configuration/
#
# Key Sections:
# - app: Application name and region
# - build: How to build the Docker image
# - http_service: HTTP routing and health checks
# - vm: Resource allocation (CPU, memory)
# - env: Non-sensitive environment variables
#
# Note: Sensitive values (DATABASE_URL, JWT_SECRET) are set via:
#   flyctl secrets set KEY=value
# ============================================

# ============================================
# Application Configuration
# ============================================
# IMPORTANT: When you run `flyctl launch`, it will ask you to choose
# an app name. This placeholder will be replaced automatically.
# Format: lowercase letters, numbers, and hyphens only
# Example: nextphoton-backend, nextphoton-api, etc.
# ============================================
app = 'your-app-name-here'

# ============================================
# Primary Region
# ============================================
# Why Singapore (sin)?
# - Your Neon database is in Singapore (ap-southeast-1)
# - Lowest latency for database queries (< 5ms)
# - Good connectivity to India (~80ms from Pune)
#
# Region codes:
# - sin: Singapore
# - bom: Mumbai, India
# - hkg: Hong Kong
# - nrt: Tokyo, Japan
#
# To change region later: flyctl regions set REGION_CODE
# ============================================
primary_region = 'sin'

# ============================================
# Build Configuration
# ============================================
# Tells Fly.io to use the Dockerfile in this directory
# The Dockerfile handles:
# - Installing Bun and dependencies
# - Generating Prisma client
# - Building NestJS application
# - Creating optimized production image
# ============================================
[build]

# ============================================
# HTTP Service Configuration
# ============================================
# Configures how Fly.io routes traffic to your application
# ============================================
[http_service]
  # ============================================
  # Internal Port
  # ============================================
  # The port your NestJS app listens on inside the container
  # Your main.ts uses: process.env.PORT || 8080
  # Fly.io automatically sets PORT=8080
  # ============================================
  internal_port = 8080

  # ============================================
  # Force HTTPS
  # ============================================
  # Always redirect HTTP → HTTPS
  # Ensures all traffic is encrypted
  # Your app will be accessible at: https://[app-name].fly.dev
  # ============================================
  force_https = true

  # ============================================
  # Auto Stop/Start Machines
  # ============================================
  # Free tier optimization: Stop VMs when idle, start on request
  # Saves resources and prevents hitting free tier limits
  #
  # How it works:
  # - VM stops after 5 minutes of no requests
  # - First request after stop: ~2-3 second cold start
  # - Subsequent requests: Normal speed
  #
  # Set to "off" for always-on (uses more resources)
  # ============================================
  auto_stop_machines = 'stop'
  auto_start_machines = true

  # ============================================
  # Min/Max Machines Running
  # ============================================
  # min_machines_running = 0: Allow all VMs to stop when idle
  # min_machines_running = 1: Keep at least 1 VM always running
  #
  # Free tier: Set to 0 to save resources
  # Production: Set to 1+ to avoid cold starts
  # ============================================
  min_machines_running = 0

  # ============================================
  # Request Timeout
  # ============================================
  # Maximum time for a request (in seconds)
  # If your API takes longer than this, it will timeout
  #
  # Adjust based on your slowest endpoint:
  # - Simple CRUD: 30s is plenty
  # - Complex queries: Increase to 60s or more
  # - File uploads: May need 120s+
  # ============================================
  [http_service.concurrency]
    type = "requests"
    hard_limit = 250
    soft_limit = 200

# ============================================
# Health Checks
# ============================================
# Fly.io uses health checks to determine if your app is working
# If health checks fail, Fly.io will:
# 1. Stop routing traffic to unhealthy VM
# 2. Attempt to restart the VM
# 3. Create a new VM if restart fails
# ============================================
[[http_service.checks]]
  # ============================================
  # Grace Period
  # ============================================
  # Wait this long after VM starts before checking health
  # Gives your NestJS app time to:
  # - Connect to database
  # - Initialize modules
  # - Start HTTP server
  #
  # 10-15 seconds is typical for NestJS apps
  # ============================================
  grace_period = "10s"

  # ============================================
  # Check Interval
  # ============================================
  # How often to check if app is healthy
  # More frequent = faster failure detection
  # Less frequent = less overhead
  #
  # 30 seconds is a good balance
  # ============================================
  interval = "30s"

  # ============================================
  # Health Check Method
  # ============================================
  # HTTP method and path to check
  # Should be a lightweight endpoint that:
  # - Returns quickly (< 1 second)
  # - Doesn't require authentication
  # - Verifies core functionality
  #
  # Common patterns:
  # - GET / (if you have a root endpoint)
  # - GET /health (dedicated health check)
  # - GET /api/health
  #
  # Your NestJS app should respond with:
  # - Status 200 OK
  # - Any response body (optional)
  # ============================================
  method = "GET"
  path = "/"

  # ============================================
  # Request Timeout
  # ============================================
  # Maximum time to wait for health check response
  # If app doesn't respond within this time, it's considered unhealthy
  # ============================================
  timeout = "5s"

# ============================================
# Virtual Machine Configuration
# ============================================
# Defines the resources allocated to your backend
# ============================================
[vm]
  # ============================================
  # Memory Allocation
  # ============================================
  # Options:
  # - 256mb: Free tier, good for low-traffic apps
  # - 512mb: Better performance, handles more concurrent requests
  # - 1gb+: High traffic or memory-intensive operations
  #
  # Your NestJS backend should run fine on 256mb
  # Monitor with: flyctl status
  # If you see OOM (out of memory) errors, increase this
  # ============================================
  memory = '256mb'

  # ============================================
  # CPU Configuration
  # ============================================
  # Options:
  # - shared: Free tier, shares CPU with other apps
  # - dedicated: Better performance, costs more
  #
  # 'shared' is sufficient for most use cases
  # ============================================
  cpu_kind = 'shared'
  cpus = 1

# ============================================
# Environment Variables (Non-Sensitive)
# ============================================
# Variables set here are PUBLIC (visible in fly.toml)
# NEVER put secrets here (DATABASE_URL, JWT_SECRET, etc.)
#
# For secrets, use: flyctl secrets set KEY=value
#
# These variables are available to your app as process.env.KEY
# ============================================
[env]
  # ============================================
  # Node Environment
  # ============================================
  # Tells NestJS and other libraries to run in production mode
  # Effects:
  # - Disables verbose logging
  # - Optimizes performance
  # - Disables development features
  # ============================================
  NODE_ENV = 'production'

  # ============================================
  # Port
  # ============================================
  # Your main.ts reads process.env.PORT
  # Fly.io automatically sets this to 8080
  # Setting it explicitly here as documentation
  # ============================================
  PORT = '8080'

  # ============================================
  # JWT Expiration
  # ============================================
  # How long JWT tokens are valid
  # Options: '1h', '1d', '7d', '30d'
  # Shorter = more secure, more frequent logins
  # Longer = better UX, less secure
  # ============================================
  JWT_EXPIRATION = '7d'

# ============================================
# Secrets Configuration (Set via CLI)
# ============================================
# DO NOT put these values in this file!
# Set them using: flyctl secrets set KEY=value
#
# Required secrets:
# ✅ DATABASE_URL - Your Neon PostgreSQL connection string
# ✅ JWT_SECRET - Cryptographically secure random string
# ✅ CORS_ORIGIN - Your Vercel frontend URL
# ✅ FRONTEND_URL - Your Vercel frontend URL
#
# Example:
# flyctl secrets set DATABASE_URL="postgresql://user:pass@host/db"
# flyctl secrets set JWT_SECRET="your-secure-random-string"
# flyctl secrets set CORS_ORIGIN="https://your-app.vercel.app"
# flyctl secrets set FRONTEND_URL="https://your-app.vercel.app"
#
# View secrets: flyctl secrets list
# Remove secret: flyctl secrets unset KEY
# ============================================

# ============================================
# Optional: Metrics and Monitoring
# ============================================
# Fly.io provides built-in metrics:
# - View metrics: flyctl metrics
# - View logs: flyctl logs
# - SSH into VM: flyctl ssh console
# - Run commands: flyctl ssh console -C "node --version"
#
# For advanced monitoring, integrate:
# - Sentry (error tracking)
# - LogRocket (session replay)
# - DataDog (APM)
# - New Relic (APM)
# ============================================

# ============================================
# Optional: Persistent Storage
# ============================================
# If your app needs persistent file storage (uploads, cache, etc.)
# Uncomment and configure volumes:
#
# [mounts]
#   source = "data"
#   destination = "/data"
#
# Create volume: flyctl volumes create data --region sin --size 1
#
# Note: Your app uses PostgreSQL (Neon), so volumes are likely not needed
# ============================================

# ============================================
# Deploy Configuration
# ============================================
# These settings control deployment behavior
# ============================================
[deploy]
  # ============================================
  # Deployment Strategy
  # ============================================
  # Options:
  # - rolling: Deploy new version gradually (zero downtime)
  # - immediate: Replace all VMs at once (brief downtime)
  # - bluegreen: Deploy to new VMs, switch traffic when ready
  #
  # 'rolling' is recommended for production
  # ============================================
  strategy = "rolling"

# ============================================
# Restart Policy
# ============================================
# What to do if the app crashes
# Options:
# - always: Always restart (recommended)
# - on-failure: Only restart if exit code != 0
# - no: Never restart automatically
# ============================================
[[restart]]
  policy = "always"

# ============================================
# NOTES FOR DEPLOYMENT
# ============================================
# 1. First-time setup:
#    cd backend/server_NestJS
#    flyctl launch --no-deploy
#    (This will create/update this fly.toml with your chosen app name)
#
# 2. Set secrets:
#    flyctl secrets set DATABASE_URL="..."
#    flyctl secrets set JWT_SECRET="..."
#    flyctl secrets set CORS_ORIGIN="..."
#    flyctl secrets set FRONTEND_URL="..."
#
# 3. Deploy:
#    flyctl deploy
#
# 4. Verify:
#    flyctl status
#    flyctl logs
#    curl https://[app-name].fly.dev
#
# 5. Monitor:
#    flyctl logs (live logs)
#    flyctl metrics (performance metrics)
#    flyctl ssh console (SSH into VM)
# ============================================
