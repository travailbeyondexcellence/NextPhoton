generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String         @id
  username String         @unique
  user     User @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Employee {
  id        String         @id
  username  String         @unique
  name      String
  surname   String
  email     String?        @unique
  phone     String?        @unique
  address   String
  img       String?
  createdAt DateTime       @default(now())
  user      User @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Intern {
  id        String         @id
  username  String         @unique
  name      String
  surname   String
  email     String?        @unique
  phone     String?        @unique
  address   String
  img       String?
  createdAt DateTime       @default(now())
  user      User @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Educator {
  id        String         @id
  username  String         @unique
  name      String
  surname   String
  email     String?        @unique
  phone     String?        @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime       @default(now())
  birthday  DateTime
  classes   Class[]
  user      User @relation(fields: [id], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  subjects  Subject[]      @relation("EducatorToSubject")
}

model Learner {
  id          String         @id
  username    String         @unique
  name        String
  surname     String
  email       String?        @unique
  phone       String?        @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime       @default(now())
  guardianId  String
  classId     Int
  gradeId     Int
  birthday    DateTime
  attendances Attendance[]
  class       Class          @relation(fields: [classId], references: [id])
  grade       Grade          @relation(fields: [gradeId], references: [id])
  guardian    Guardian       @relation(fields: [guardianId], references: [id])
  user        User @relation(fields: [id], references: [id], onDelete: Cascade)
  results     Result[]
}

model Guardian {
  id        String         @id
  username  String         @unique
  name      String
  surname   String
  email     String?        @unique
  phone     String         @unique
  address   String
  createdAt DateTime       @default(now())
  user      User @relation(fields: [id], references: [id], onDelete: Cascade)
  learners  Learner[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  classes  Class[]
  learners Learner[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  gradeId       Int
  announcements Announcement[]
  grade         Grade          @relation(fields: [gradeId], references: [id])
  supervisor    Educator?      @relation(fields: [supervisorId], references: [id])
  events        Event[]
  learners      Learner[]
  lessons       Lesson[]
}

model Subject {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  lessons   Lesson[]
  educators Educator[] @relation("EducatorToSubject")
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  subjectId   Int
  classId     Int
  educatorId  String
  assignments Assignment[]
  attendances Attendance[]
  exams       Exam[]
  class       Class        @relation(fields: [classId], references: [id])
  educator    Educator     @relation(fields: [educatorId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  examId       Int?
  assignmentId Int?
  learnerId    String
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  exam         Exam?       @relation(fields: [examId], references: [id])
  learner      Learner     @relation(fields: [learnerId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  lessonId  Int
  learnerId String
  learner   Learner  @relation(fields: [learnerId], references: [id])
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Account {
  id                String         @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User    User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id             String         @id
  sessionToken   String         @unique
  userId         String
  expires        DateTime
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole            @default(USER)
  admin             Admin?
  Account Account[]
  Session Session[]
  educator          Educator?
  employee          Employee?
  guardian          Guardian?
  intern            Intern?
  learner           Learner?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum UserRole {
  ADMIN
  EMPLOYEE
  INTERN
  EDUCATOR
  LEARNER
  GUARDIAN
  USER
}
